# Auto-Analyst Environment Configuration Example
# Copy this file to .env and fill in your actual values.
# Do NOT commit your actual .env file to version control.

# --- Core AI Service Keys ---
# Required for OpenAI models used by DSPy and LlamaIndex embeddings
OPENAI_API_KEY="sk-YourOpenAIAPIKeyHere"

# Optional: If you want to use Llama3 or other models via Groq
# GROQ_API_KEY="gsk_YourGroqAPIKeyHere"

# --- DSPy LLM Configuration ---
# Specifies the model DSPy will use.
# Examples: "gpt-4o-mini", "gpt-4o", "gpt-4-turbo", "llama3-70b-8192" (if using Groq)
# Default in enhanced_streamlit_frontend.py is 'gpt-4o-mini' if this is not set.
DSPY_LLM_MODEL="gpt-4o-mini"

# Maximum tokens for the LLM response. Adjust based on model and complexity.
# Default in enhanced_streamlit_frontend.py is 4096 if this is not set.
DSPY_LLM_MAX_TOKENS="4096"

# --- Flask Application Settings (for flask_app) ---
# Standard Flask environment variable to point to the application.
# Typically, this is automatically detected or set when running `flask run`.
# For gunicorn, it's specified in the command: `flask_app.flask_app:app`
# FLASK_APP="flask_app.flask_app:app" # Or simply "flask_app:app" if flask_app is a package

# Standard Flask environment. Set to "development" for debug mode, "production" for live.
# Gunicorn typically runs in production mode.
FLASK_ENV="development"

# Database URL for SQLAlchemy.
# The current flask_app.py uses a hardcoded SQLite path: "sqlite:///response.db"
# If you switch to PostgreSQL or another DB, you would set it here.
# Example for PostgreSQL: DATABASE_URL="postgresql://user:password@host:port/database"
# Example for SQLite (relative path): DATABASE_URL="sqlite:///./instance/prod.db"
# DATABASE_URL="sqlite:///response.db"

# --- Other Optional Settings ---
# Example: If you had a specific port for the Flask app (though usually set in run command)
# FLASK_RUN_PORT="5001"

# Example: Logging level for your application
# LOG_LEVEL="INFO"
